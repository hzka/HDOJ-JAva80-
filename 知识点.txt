
1.杭电OJ特别注意格式化输入和输出。
2.2000题中，AnsCII中要注意的是利用两次循环每次拿出最小值即可。
3.2001题中，保留两位小数的两种保护方法，后者更好的一点： 
（1）//利用DecimalFormat实现格式化输出。
     DecimalFormat df = new DecimalFormat("#.##");
     System.out.println(df.format(length));
（2） //真的就是保存两位小数
     System.out.println(String.format("%.2f",length));
4.2002题中，Math.pow指的是求平方立方。Java一般默认实数类型为double，因为精度更高一点。还有3/2是整数，3.0/2是实数，是不是傻啊。大部分的API靠自己找，尽量不要百度。
5.2003题中，Math.abs指的是取绝对值。
6.*2005题中，
（1）字符串转数字使用的是int month1 = Integer.parseInt(month);方法。
（2）公元年数可被4整除为闰年，但是正百的年数必须是可以被400整除的才是闰年。其他都是平年。
（3）用数组将每个月份存起来，加上就好了，你是不是傻，代码冗余那么多。
7.***2007问题中，
（1）对题意理解不够透彻，所以才瞎j胡写，首先理清题意，明白干了啥事；
（2）考虑小于大于两种情况，不要以为自己写的就一定是对的，况且你写的也不一定对。
8.2008题中，需要注意2001中提到的第二个问题。System.out.println(String.format("%.2f",length));
9.1720题中，没有输入字符的函数，只能输入字符串然后通过
      int num_01 = Integer.parseInt(num_1,16);强制转为整数。
10.***1062题中，存在的问题：
（1）使用一个对象无法同时初始化nextInt()和nextLine();nextLine()可以输入带空格字符串，next()不可以。
（2）使用Split对字符串进行切割。
（3）一直显示PE。
11.**2104题中，存在的问题:
（1）仔细审题，杭电OJ的题一方面绝对有答案，经得起考验；一方面也不会太简单。
（2）Time Limit Exceeded错误指的一般是执行效率比较低，必须要提高执行效率。
（3）求最大公约数时使用迭代相除法。
eg:private static int gcd(int people_num, int initia_val) {
        if(initia_val == 0){
            return people_num;
        }else{
            return gcd(initia_val,people_num%initia_val);
        }
    }
12.2734题中，a的Ascii为97，A的Ascii为65，空格的Ascii为32.
13.1197题中，十进制转二进制、转八进制、转十六进制。其他的完全靠自己算：
System.out.println("10的二进制="+Integer.toBinaryString(10));
System.out.println("10的八进制="+Integer.toOctalString(10));
System.out.println("10的十六进制="+Integer.toHexString(10));
14.2629题中，杭电OJ对输出检查已经到了丧心病狂的地步了。
正确的：System.out.println(Cer_ID.substring(10, 12));
错误的：System.out.println(Integer.parseInt(Cer_ID.substring(10, 12)));
15.2014题中，有着更好的解决方法，删除最小元素并缩容：
        //对数组进行缩容，score[flag]为最小值。
        score[flag] = score[score.length-1];
        score = Arrays.copyOf(score,score.length-1);
16.2018题中，有着更好的解决方法：
   统计所有猪的总数，发现其中规律，并使用递归方法进行调用，正向的计算真的很麻烦。
17.2022、2023题中，主要考察对于二维数组的反向读取，按列读、按行读等。
18.2024题中，存在两个小知识点：
（1）C语言中规定标识符只能由字母、数字和下划线3种字符组成，且第一个字符必须为字母或下划线。利用strings.charAt(i)可获取Ascii值。然后利用Ascii范围进行确定。
（2）sc_01.nextInt();与sc_01.nextLine();之间必须要有一个无用的sc_01.nextLine()。
19.2025题中，知晓了提交的时候不要提交包名。
20.**2028题中，如何求多个数的最小公倍数?
（1）求最大公约数法：最大公约数*最小公倍数 = 两个数之积。
     1.求两个数最大公约数；2.利用该公式计算最小公倍数；3.循环计算两个数的最小公倍数。
（2）使用辗转相除法求 比如：下图为求 2 4 6的最小公倍数，用2 4 6做辗转相除法可得最小公倍数为2*1*2
（3）而第三种方法为：先求出n个数中最大的那个数max，如果这个数可以整除所有的数，则这是最小公倍数，如果不能则令max+1直到找到可以整除所有的数的那个数为止。
21.**2030题中，汉字Unicode编码的特点？
（1）通过Unicode进行汉字编码的，中文的unicode编码范围是: 在33-126之间的字母。只要>32和<126之内即可。汉字是32位的。
（2）汉字Unicode链接：https://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php
22.2032题中，如何写杨辉三角形？
（1）发现其中规律，自己的解决办法是建立两个数组，对旧数组进行更新。别人的方法是建立二维数组进行更新内容。
（2）不同数组长度的数组是可以互相赋值进行更新的。
23.2054题中，存在侥幸心理：
（1） BigDecimal num_01 = sc_01.nextBigDecimal();所定义的范围要比double，int长很多，大数。对于不需要任何准确计算精度的数字可以直接使用float或double，但是如果需要精确计算的结果，则必须使用BigDecimal类，而且使用BigDecimal类也可以进行大数的操作。
（2）BigDecimal比较2个值是否相等，不能用equals，而要用compareTo，若0相等，1为大于，-1为小于。eg:num_01.compareTo(num_02)
24.2055题中，充分利用Ascii码与函数的对应关系。
25.**2072题中，得出以下经验：
（1）在字符串处理过程中要考虑到空字符串；
（2）充分利用一些简单的API，使用API去判断包不包含比你写的撇脚代码好太多。
26.
Smith	  -1	-16
John	  116	-2
Josephus  72(3)	126
Bush	  0	-1
Alice	  -2	67(2)
Bob	  0	0

Smith	  -1	-16	8	0	0	120	39	0
John	  116	-2	11	0	0	82	55(1)	0
Josephus  72(3)	126	10	-3	0	47	21(2)	-2
Bush	  0	-1	-8	0	0	0	0	0
Alice	  -2	67(2)	13	-1	0	133	79(1)	-1
Bob	  0	0	57(5)	0	0	168	-7	0

27.2091题中，得出以下结论：
（1）寻找规律很重要；空心三角形的规律是什么得搞清楚；
（2）格式很重要，这个问题格式很奇怪，与前面有很大不同所有导致PE，亿解决。
28.1004题中，得到以下结论：
（1）自己采用的动态数组+类结合方法代码较为复杂，不如别人用一维数组去统计，记录最大的下标，遍历两遍即可获得最大的。
（2）MaxStrings = arrayList_02.get(k+1).color_name;只有在赋值的时候发生改变。不会随k变大而MaxStrings 发生变化的。
29.2057题中，得到以下结论：
（1）题目中已知十六进制整数A和B组成，A和B的长度小于15。为什么不直接给Long，还是不够细心？
（2）Java API很强大， Long.parseLong(num_01, 16)、Long.toHexStrin(result).to
UpperCase()不用自己实现了。
30.2031题中，得到以下结论：
  进制转换判断逻辑:
while (num / jinzhi != 0) {
  int tmp = num % jinzhi;
  num = num / jinzhi;
  arrayList_01.add(checknum(tmp));
}
//末尾的数加进去
arrayList_01.add(checknum(num % jinzhi));
31.2033题中，得到以下结论：
时间转换都先转换成，后进行计算即可。
32.2070题中，得到以下结论：
（1）使用递归也可以解决问题，但是复杂度会较高，执行效率会大幅度较低，出现运行超时的错误。
（2）正向求解数组每个元素的值。
33.2075题中，得到以下结论:
（1）int 二进制位数：32 包装类：java.lang.Integer 
最小值：Integer.MIN_VALUE= -2147483648 （-2的31次方）最大值：Integer.MAX_VALUE= 2147483647  （2的31次方-1）
（2）short 二进制位数：16包装类：java.lang.Short
最小值：Short.MIN_VALUE=-32768 （-2的15此方）最大值：Short.MAX_VALUE=32767 （2的15次方-1）
（3）long 二进制位数：64包装类：java.lang.Long
最小值：Long.MIN_VALUE=-9223372036854775808 （-2的63次方）最大值：Long.MAX_VALUE=9223372036854775807 （2的63次方-1）
（4）float 二进制位数：32包装类：java.lang.Float
最小值：Float.MIN_VALUE=1.4E-45 （2的-149次方）最大值：Float.MAX_VALUE=3.4028235E38 （2的128次方-1）
（5）double 二进制位数：64包装类：java.lang.Double
最小值：Double.MIN_VALUE=4.9E-324 （2的-1074次方）最大值：Double.MAX_VALUE=1.7976931348623157E308 （2的1024次方-1）
34.2089题中，得到以下结论：
（1）开始遇到时间复杂度过高执行时间过长的问题，必须先行计算所有数组元素，输入之后直接得结论。这样执行时间会减少。
（2）利用数组进行累加计算。
35.2090题中，得到以下结论：
（1）ctrl+D结束输出。
（2）System.out.println(String.format("%.1f",result));//人家自己就有四舍五入。
36.2096题中，得到以下结论：
（1）对于API的熟练使用：
 num_01 = Math.abs(num_01);
 String tmp = String.valueOf(num_01);
 return Integer.parseInt(tmp.substring(tmp.length()-2,tmp.length()));
37.2097题中，得到以下结论：
（1）一定要保证能跑通多个测试用例，学会用巧劲。
38.**2098题中，得到以下结论：
刚开始的方法是找到1w以内所有素数，用动态数组进行存储，然后在动态数组里面判断是不是contains，结果显示一直超时。
参考别人代码改进的方法为：判断素数方法一样，先找较小素数元素（从3开始的且每次+2操作），同时判断两者之差是不是素数（不用数组进行存储，极大减少代码时间复杂度）
39.2099题中，得到以下结论：
重在理解题意。
40.1995、1996题中，得到以下结论：
（1）抛弃惯性思维，不要自己认为这很难很难，其实也蛮简单的；
（2）发现规律要比写代码重要太多，其实我当时已经发现其中规律了，但想着汉诺塔问题不会那么简单，再加上之前好像用递归有学过，更不敢下手了，还是要对自己的直觉保持信心，对于算法的理解要比写代码本身好太多。
41.**1722题中：
关键要画图才能明白，画个圆看着切，立马就理解了。
注意一定是首尾相连的形状情况，因为有两刀是重合的，以题目4，6为例，所以按照图中的标记全部切割是4+6-2，2是重合的切割标记数量，数学意义上是4，6的最大公约数，这样如果4人，则1+8 2+3 4+5 6+7，如果6人，则1+2 3+4 5+6.......(可以以圆心角的度数来理解)最后公式为：a+b-gcd(a,b)
42.1108、2138题中：
1.存在时间复杂度过高的问题。三种优化方法：(1)小于等于Math.sqrt(num);(2)去掉偶数；（3）艾拉拖死筛选法
2.有了惯性思维，以为不用判断hasNext，一切皆有可能。
3.先求最小公约数、再求最大公倍数，求最小公约数采用辗转相除法。
      while (division_01 % division_02 != 0 ){
            tmp = division_02;
            division_02 = division_01 %division_02;
            division_01 = tmp;
        }
43.2504题中：
已知一个数和最大公约数，求最小的另一个数。若是两个数除最大公约数后仍然有公约数，则失败,确保除了之后的商没有公约数;